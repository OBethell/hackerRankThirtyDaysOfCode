import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {   
    
    // Method to calculate how many binary digits represent input
    static int howManyBinaryDigits(int x){
        return (int) Math.floor(Math.log(x) / Math.log(2));
    }
    
    // Method to convert decimal input to binary Linked List
    static LinkedList<Boolean> convertToBinary(int input){
        // Calculate the minium amount of binary digits to represent input
        int binaryDigits = howManyBinaryDigits(input);
        // Initalise list of binary input
        LinkedList<Boolean> binaryInput = new LinkedList<Boolean>();
        // Cycle through binary digits in decending order
        for(int i = binaryDigits; i >= 0; i--){
            // Calculate the decimal value represented by the current coloum
            int binaryColumn = (int) Math.pow(2,i);
            // If this value is smaller than the input...
            if(binaryColumn <= input){
                // Set the binary output to true and remove the decimal value from the input
                binaryInput.add(true);
                input -= binaryColumn;
            // Else set the binary output to false
            }else{
                binaryInput.add(false);
            }
        }
        return binaryInput;
    }
    
    static int howManyConsecutiveOnes(int input){
        
        // Initalise: LinkedList of binary Input; Inital size of list; Consecutive Run count; and final answer.
        LinkedList<Boolean> binaryInput = convertToBinary(input);
        int initalSizeOfBinaryInput = binaryInput.size();
        int currentConsecutiveRun = 0;
        int ans = 0;
        
        // Cycle throught the linked list adding to the consecutive count
        for(int i = 0; i < initalSizeOfBinaryInput; i++){
            if(binaryInput.pop() == true){
                currentConsecutiveRun++;
                //System.out.println(binaryInput.size());
                // And producing a new answer if the current consecutive count is the longest
                if(currentConsecutiveRun > ans){
                    ans = currentConsecutiveRun;
                }
            // Else reset the consecutive run back to zero
            }else{
                currentConsecutiveRun = 0;
            }
        }
        return ans;
    }
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        System.out.println(howManyConsecutiveOnes(n));
    }
}
